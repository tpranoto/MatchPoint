// Mocks generated by Mockito 5.4.5 from annotations
// in matchpoint/test/main_scaffold_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i9;

import 'package:flutter/material.dart' as _i18;
import 'package:geolocator/geolocator.dart' as _i2;
import 'package:matchpoint/models/auth.dart' as _i3;
import 'package:matchpoint/models/category.dart' as _i13;
import 'package:matchpoint/models/profile.dart' as _i4;
import 'package:matchpoint/models/reservation.dart' as _i15;
import 'package:matchpoint/models/review.dart' as _i20;
import 'package:matchpoint/models/timeslot.dart' as _i16;
import 'package:matchpoint/models/venue.dart' as _i12;
import 'package:matchpoint/providers/auth_provider.dart' as _i7;
import 'package:matchpoint/providers/location_provider.dart' as _i5;
import 'package:matchpoint/providers/notification_provider.dart' as _i17;
import 'package:matchpoint/providers/profile_provider.dart' as _i8;
import 'package:matchpoint/providers/reservation_provider.dart' as _i14;
import 'package:matchpoint/providers/review_provider.dart' as _i19;
import 'package:matchpoint/providers/venue_provider.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGeolocatorPlatform_0 extends _i1.SmartFake
    implements _i2.GeolocatorPlatform {
  _FakeGeolocatorPlatform_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakePosition_1 extends _i1.SmartFake implements _i2.Position {
  _FakePosition_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeAuth_2 extends _i1.SmartFake implements _i3.Auth {
  _FakeAuth_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeProfile_3 extends _i1.SmartFake implements _i4.Profile {
  _FakeProfile_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LocationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationProvider extends _i1.Mock implements _i5.LocationProvider {
  @override
  _i2.GeolocatorPlatform get geolocator =>
      (super.noSuchMethod(
            Invocation.getter(#geolocator),
            returnValue: _FakeGeolocatorPlatform_0(
              this,
              Invocation.getter(#geolocator),
            ),
            returnValueForMissingStub: _FakeGeolocatorPlatform_0(
              this,
              Invocation.getter(#geolocator),
            ),
          )
          as _i2.GeolocatorPlatform);

  @override
  bool get permissionDenied =>
      (super.noSuchMethod(
            Invocation.getter(#permissionDenied),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i2.Position get latLong =>
      (super.noSuchMethod(
            Invocation.getter(#latLong),
            returnValue: _FakePosition_1(this, Invocation.getter(#latLong)),
            returnValueForMissingStub: _FakePosition_1(
              this,
              Invocation.getter(#latLong),
            ),
          )
          as _i2.Position);

  @override
  _i6.Stream<_i5.LocationData> get locationStream =>
      (super.noSuchMethod(
            Invocation.getter(#locationStream),
            returnValue: _i6.Stream<_i5.LocationData>.empty(),
            returnValueForMissingStub: _i6.Stream<_i5.LocationData>.empty(),
          )
          as _i6.Stream<_i5.LocationData>);

  @override
  void streamCurrentLocation() => super.noSuchMethod(
    Invocation.method(#streamCurrentLocation, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> loadCurrentLocation() =>
      (super.noSuchMethod(
            Invocation.method(#loadCurrentLocation, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [AppAuthProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppAuthProvider extends _i1.Mock implements _i7.AppAuthProvider {
  @override
  _i3.Auth get getData =>
      (super.noSuchMethod(
            Invocation.getter(#getData),
            returnValue: _FakeAuth_2(this, Invocation.getter(#getData)),
            returnValueForMissingStub: _FakeAuth_2(
              this,
              Invocation.getter(#getData),
            ),
          )
          as _i3.Auth);

  @override
  _i6.Stream<_i3.Auth?> get stateChanges =>
      (super.noSuchMethod(
            Invocation.getter(#stateChanges),
            returnValue: _i6.Stream<_i3.Auth?>.empty(),
            returnValueForMissingStub: _i6.Stream<_i3.Auth?>.empty(),
          )
          as _i6.Stream<_i3.Auth?>);

  @override
  _i6.Future<void> signInWithGoogle() =>
      (super.noSuchMethod(
            Invocation.method(#signInWithGoogle, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [ProfileProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockProfileProvider extends _i1.Mock implements _i8.ProfileProvider {
  @override
  _i4.Profile get getProfile =>
      (super.noSuchMethod(
            Invocation.getter(#getProfile),
            returnValue: _FakeProfile_3(this, Invocation.getter(#getProfile)),
            returnValueForMissingStub: _FakeProfile_3(
              this,
              Invocation.getter(#getProfile),
            ),
          )
          as _i4.Profile);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i6.Future<void> loadProfile(String? uid) =>
      (super.noSuchMethod(
            Invocation.method(#loadProfile, [uid]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> loadAndSaveProfile(_i3.Auth? auth) =>
      (super.noSuchMethod(
            Invocation.method(#loadAndSaveProfile, [auth]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> incrReservations() =>
      (super.noSuchMethod(
            Invocation.method(#incrReservations, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> decrReservations() =>
      (super.noSuchMethod(
            Invocation.method(#decrReservations, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> incrReviews() =>
      (super.noSuchMethod(
            Invocation.method(#incrReviews, []),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> updateFCMToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#updateFCMToken, [token]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void removeProfile() => super.noSuchMethod(
    Invocation.method(#removeProfile, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [VenueProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockVenueProvider extends _i1.Mock implements _i10.VenueProvider {
  @override
  String get apiKey =>
      (super.noSuchMethod(
            Invocation.getter(#apiKey),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.getter(#apiKey),
            ),
            returnValueForMissingStub: _i11.dummyValue<String>(
              this,
              Invocation.getter(#apiKey),
            ),
          )
          as String);

  @override
  List<_i12.Venue> get getList =>
      (super.noSuchMethod(
            Invocation.getter(#getList),
            returnValue: <_i12.Venue>[],
            returnValueForMissingStub: <_i12.Venue>[],
          )
          as List<_i12.Venue>);

  @override
  String get nextPageUrl =>
      (super.noSuchMethod(
            Invocation.getter(#nextPageUrl),
            returnValue: _i11.dummyValue<String>(
              this,
              Invocation.getter(#nextPageUrl),
            ),
            returnValueForMissingStub: _i11.dummyValue<String>(
              this,
              Invocation.getter(#nextPageUrl),
            ),
          )
          as String);

  @override
  bool get isNextPageLoading =>
      (super.noSuchMethod(
            Invocation.getter(#isNextPageLoading),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i6.Stream<List<_i12.Venue>> get venueStream =>
      (super.noSuchMethod(
            Invocation.getter(#venueStream),
            returnValue: _i6.Stream<List<_i12.Venue>>.empty(),
            returnValueForMissingStub: _i6.Stream<List<_i12.Venue>>.empty(),
          )
          as _i6.Stream<List<_i12.Venue>>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void resetVenues() => super.noSuchMethod(
    Invocation.method(#resetVenues, []),
    returnValueForMissingStub: null,
  );

  @override
  void streamCurrentVenues() => super.noSuchMethod(
    Invocation.method(#streamCurrentVenues, []),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> fetchVenues(
    _i2.Position? pos,
    _i13.SportsCategories? cat, {
    String? searchName = '',
    int? radius = 20000,
    int? limit = 20,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #fetchVenues,
              [pos, cat],
              {#searchName: searchName, #radius: radius, #limit: limit},
            ),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [ReservationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockReservationProvider extends _i1.Mock
    implements _i14.ReservationProvider {
  @override
  _i6.Stream<_i15.RsStatusList> get venueScheduleStream =>
      (super.noSuchMethod(
            Invocation.getter(#venueScheduleStream),
            returnValue: _i6.Stream<_i15.RsStatusList>.empty(),
            returnValueForMissingStub: _i6.Stream<_i15.RsStatusList>.empty(),
          )
          as _i6.Stream<_i15.RsStatusList>);

  @override
  List<_i15.Reservation> get userReservations =>
      (super.noSuchMethod(
            Invocation.getter(#userReservations),
            returnValue: <_i15.Reservation>[],
            returnValueForMissingStub: <_i15.Reservation>[],
          )
          as List<_i15.Reservation>);

  @override
  List<_i16.TimeSlot> get selectedTimeslots =>
      (super.noSuchMethod(
            Invocation.getter(#selectedTimeslots),
            returnValue: <_i16.TimeSlot>[],
            returnValueForMissingStub: <_i16.TimeSlot>[],
          )
          as List<_i16.TimeSlot>);

  @override
  set selectedTimeslots(List<_i16.TimeSlot>? timeSlots) => super.noSuchMethod(
    Invocation.setter(#selectedTimeslots, timeSlots),
    returnValueForMissingStub: null,
  );

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  void addTimeslot(_i16.TimeSlot? ts) => super.noSuchMethod(
    Invocation.method(#addTimeslot, [ts]),
    returnValueForMissingStub: null,
  );

  @override
  void rmTimeslot(_i16.TimeSlot? ts) => super.noSuchMethod(
    Invocation.method(#rmTimeslot, [ts]),
    returnValueForMissingStub: null,
  );

  @override
  _i6.Future<void> createReservation(_i15.Reservation? rsv) =>
      (super.noSuchMethod(
            Invocation.method(#createReservation, [rsv]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> loadReservationsByVenue(
    DateTime? currentDate,
    String? venueId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#loadReservationsByVenue, [currentDate, venueId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> loadReservationByUser(String? profileId) =>
      (super.noSuchMethod(
            Invocation.method(#loadReservationByUser, [profileId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> removeUserReservation(_i15.Reservation? rsv) =>
      (super.noSuchMethod(
            Invocation.method(#removeUserReservation, [rsv]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> userReservationReviewed(String? rsvId) =>
      (super.noSuchMethod(
            Invocation.method(#userReservationReviewed, [rsvId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  void addListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i9.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [NotificationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationProvider extends _i1.Mock
    implements _i17.NotificationProvider {
  @override
  _i6.Future<void> setupNotification(_i18.BuildContext? ctx) =>
      (super.noSuchMethod(
            Invocation.method(#setupNotification, [ctx]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}

/// A class which mocks [ReviewProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockReviewProvider extends _i1.Mock implements _i19.ReviewProvider {
  @override
  List<_i20.Review> get venueReviewData =>
      (super.noSuchMethod(
            Invocation.getter(#venueReviewData),
            returnValue: <_i20.Review>[],
            returnValueForMissingStub: <_i20.Review>[],
          )
          as List<_i20.Review>);

  @override
  List<_i20.Review> get userReviewData =>
      (super.noSuchMethod(
            Invocation.getter(#userReviewData),
            returnValue: <_i20.Review>[],
            returnValueForMissingStub: <_i20.Review>[],
          )
          as List<_i20.Review>);

  @override
  double get ratings =>
      (super.noSuchMethod(
            Invocation.getter(#ratings),
            returnValue: 0.0,
            returnValueForMissingStub: 0.0,
          )
          as double);

  @override
  _i6.Future<void> loadVenueReviews(
    String? venueId,
    double? oldRatings,
    int? ratingsCount,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#loadVenueReviews, [
              venueId,
              oldRatings,
              ratingsCount,
            ]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> loadUserReviews(String? profileId) =>
      (super.noSuchMethod(
            Invocation.method(#loadUserReviews, [profileId]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);

  @override
  _i6.Future<void> addMyNewReview(_i20.Review? review) =>
      (super.noSuchMethod(
            Invocation.method(#addMyNewReview, [review]),
            returnValue: _i6.Future<void>.value(),
            returnValueForMissingStub: _i6.Future<void>.value(),
          )
          as _i6.Future<void>);
}
