// Mocks generated by Mockito 5.4.5 from annotations
// in matchpoint/test/home_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:ui' as _i4;

import 'package:geolocator/geolocator.dart' as _i8;
import 'package:matchpoint/models/category.dart' as _i9;
import 'package:matchpoint/models/place.dart' as _i6;
import 'package:matchpoint/providers/location_provider.dart' as _i2;
import 'package:matchpoint/providers/place_provider.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LocationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationProvider extends _i1.Mock implements _i2.LocationProvider {
  @override
  bool get permissionDenied =>
      (super.noSuchMethod(
            Invocation.getter(#permissionDenied),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isLoading =>
      (super.noSuchMethod(
            Invocation.getter(#isLoading),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i3.Future<void> getCurrentLocation() =>
      (super.noSuchMethod(
            Invocation.method(#getCurrentLocation, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PlaceProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlaceProvider extends _i1.Mock implements _i5.PlaceProvider {
  @override
  List<_i6.Place> get getList =>
      (super.noSuchMethod(
            Invocation.getter(#getList),
            returnValue: <_i6.Place>[],
            returnValueForMissingStub: <_i6.Place>[],
          )
          as List<_i6.Place>);

  @override
  String get nextPageUrl =>
      (super.noSuchMethod(
            Invocation.getter(#nextPageUrl),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#nextPageUrl),
            ),
            returnValueForMissingStub: _i7.dummyValue<String>(
              this,
              Invocation.getter(#nextPageUrl),
            ),
          )
          as String);

  @override
  bool get isLoading =>
      (super.noSuchMethod(
            Invocation.getter(#isLoading),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  bool get isScrollLoading =>
      (super.noSuchMethod(
            Invocation.getter(#isScrollLoading),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  String get errMsg =>
      (super.noSuchMethod(
            Invocation.getter(#errMsg),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#errMsg),
            ),
            returnValueForMissingStub: _i7.dummyValue<String>(
              this,
              Invocation.getter(#errMsg),
            ),
          )
          as String);

  @override
  String get errScrollMsg =>
      (super.noSuchMethod(
            Invocation.getter(#errScrollMsg),
            returnValue: _i7.dummyValue<String>(
              this,
              Invocation.getter(#errScrollMsg),
            ),
            returnValueForMissingStub: _i7.dummyValue<String>(
              this,
              Invocation.getter(#errScrollMsg),
            ),
          )
          as String);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(
            Invocation.getter(#hasListeners),
            returnValue: false,
            returnValueForMissingStub: false,
          )
          as bool);

  @override
  _i3.Future<void> fetchPlaces(
    _i8.Position? pos,
    _i9.SportsCategories? cat, {
    String? searchName = '',
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #fetchPlaces,
              [pos, cat],
              {#searchName: searchName},
            ),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  dynamic addList(List<_i6.Place>? places) => super.noSuchMethod(
    Invocation.method(#addList, [places]),
    returnValueForMissingStub: null,
  );

  @override
  dynamic replaceList(List<_i6.Place>? places) => super.noSuchMethod(
    Invocation.method(#replaceList, [places]),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i4.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
